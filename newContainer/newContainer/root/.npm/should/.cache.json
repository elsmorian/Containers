{"_id":"should","_rev":"41-52bee7986d97af5b346a865a8a090f89","name":"should","description":"test framework agnostic BDD-style assertions","dist-tags":{"latest":"0.6.3"},"versions":{"0.0.1":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.0.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["test","bdd","assert"],"main":"./lib/should","engines":{"node":">= 0.2.0"},"_id":"should@0.0.1","_nodeSupported":true,"_npmVersion":"0.2.7-3","_nodeVersion":"v0.2.5","dist":{"tarball":"http://registry.npmjs.org/should/-/should-0.0.1.tgz"},"directories":{}},"0.0.2":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.0.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["test","bdd","assert"],"main":"./lib/should","engines":{"node":">= 0.2.0"},"_id":"should@0.0.2","_nodeSupported":true,"_npmVersion":"0.2.7-3","_nodeVersion":"v0.2.5","dist":{"tarball":"http://registry.npmjs.org/should/-/should-0.0.2.tgz"},"directories":{}},"0.0.3":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.0.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["test","bdd","assert"],"main":"./lib/should","engines":{"node":">= 0.2.0"},"_id":"should@0.0.3","_nodeSupported":true,"_npmVersion":"0.2.7-3","_nodeVersion":"v0.2.5","dist":{"tarball":"http://registry.npmjs.org/should/-/should-0.0.3.tgz"},"directories":{}},"0.0.4":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.0.4","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"keywords":["test","bdd","assert"],"main":"./lib/should","engines":{"node":">= 0.2.0"},"_id":"should@0.0.4","_nodeSupported":true,"_npmVersion":"0.2.8-1","_nodeVersion":"v0.2.5","dist":{"tarball":"http://registry.npmjs.org/should/-/should-0.0.4.tgz"},"directories":{}},"0.1.0":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.1.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"contributors":[{"name":"Aseem Kishore","email":"aseem.kishore@gmail.com"}],"keywords":["test","bdd","assert"],"main":"./lib/should.js","engines":{"node":">= 0.2.0"},"_id":"should@0.1.0","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.4","directories":{"lib":"./lib"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"140ac5ad733d3f63b3a39a387144b8e4a37b53da","tarball":"http://registry.npmjs.org/should/-/should-0.1.0.tgz"}},"0.2.0":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.2.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"contributors":[{"name":"Aseem Kishore","email":"aseem.kishore@gmail.com"}],"keywords":["test","bdd","assert"],"main":"./lib/should.js","engines":{"node":">= 0.2.0"},"_id":"should@0.2.0","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.6","directories":{"lib":"./lib"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"8a5fc3d23f32272fb638f6f6a2ffca06ddf72e02","tarball":"http://registry.npmjs.org/should/-/should-0.2.0.tgz"}},"0.2.1":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.2.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"contributors":[{"name":"Aseem Kishore","email":"aseem.kishore@gmail.com"}],"keywords":["test","bdd","assert"],"main":"./lib/should.js","engines":{"node":">= 0.2.0"},"dependencies":{},"devDependencies":{},"_id":"should@0.2.1","_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"5456ca01063d3abeb26b9fe4c918c517deee058d","tarball":"http://registry.npmjs.org/should/-/should-0.2.1.tgz"},"scripts":{},"directories":{}},"0.3.0":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.3.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"contributors":[{"name":"Aseem Kishore","email":"aseem.kishore@gmail.com"}],"keywords":["test","bdd","assert"],"main":"./lib/should.js","engines":{"node":">= 0.2.0"},"_npmJsonOpts":{"file":"/Users/tj/.npm/should/0.3.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"should@0.3.0","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"ccfeb2671f4f3458a6542e987ea27249d0c3fe29","tarball":"http://registry.npmjs.org/should/-/should-0.3.0.tgz"},"scripts":{},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.3.1":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.3.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"contributors":[{"name":"Aseem Kishore","email":"aseem.kishore@gmail.com"}],"keywords":["test","bdd","assert"],"main":"./lib/should.js","engines":{"node":">= 0.2.0"},"_npmJsonOpts":{"file":"/Users/tj/.npm/should/0.3.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"should@0.3.1","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"23924fa778ec7e5cfbd6746dc5a9c7f175ce1be4","tarball":"http://registry.npmjs.org/should/-/should-0.3.1.tgz"},"scripts":{},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.3.2":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.3.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"contributors":[{"name":"Aseem Kishore","email":"aseem.kishore@gmail.com"}],"devDependencies":{"expresso":"0.9.2","should":"*"},"keywords":["test","bdd","assert"],"main":"./lib/should.js","engines":{"node":">= 0.2.0"},"_npmJsonOpts":{"file":"/Users/tj/.npm/should/0.3.2/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"should@0.3.2","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.5.9","_defaultsLoaded":true,"dist":{"shasum":"6fff9bdc8bebf422ad8f54b6ef708b0dba5116af","tarball":"http://registry.npmjs.org/should/-/should-0.3.2.tgz"},"scripts":{},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.4.0":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.4.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"contributors":[{"name":"Aseem Kishore","email":"aseem.kishore@gmail.com"}],"devDependencies":{"mocha":"*","should":"*"},"keywords":["test","bdd","assert"],"main":"./lib/should.js","engines":{"node":">= 0.2.0"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"should@0.4.0","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"1ecd6827aec709844198dd3d57605e7433cf05ea","tarball":"http://registry.npmjs.org/should/-/should-0.4.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.4.1":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.4.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"contributors":[{"name":"Aseem Kishore","email":"aseem.kishore@gmail.com"}],"devDependencies":{"mocha":"*","should":"*"},"keywords":["test","bdd","assert"],"main":"./lib/should.js","engines":{"node":">= 0.2.0"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"should@0.4.1","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"b9a583f01ecd14491ca6aa60a30d9bf6b97a9542","tarball":"http://registry.npmjs.org/should/-/should-0.4.1.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.4.2":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.4.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"contributors":[{"name":"Aseem Kishore","email":"aseem.kishore@gmail.com"}],"devDependencies":{"mocha":"*","should":"*"},"keywords":["test","bdd","assert"],"main":"./lib/should.js","engines":{"node":">= 0.2.0"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"should@0.4.2","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"b365452b42f370dfdc7fd6d1c00ee1c6df1ff2c7","tarball":"http://registry.npmjs.org/should/-/should-0.4.2.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.5.0":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.5.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"contributors":[{"name":"Aseem Kishore","email":"aseem.kishore@gmail.com"}],"devDependencies":{"mocha":"*","should":"*"},"keywords":["test","bdd","assert"],"main":"./lib/should.js","engines":{"node":">= 0.2.0"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"should@0.5.0","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"e55b4c9794373ad0ee9da152f4b4ce4200ddd140","tarball":"http://registry.npmjs.org/should/-/should-0.5.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.5.1":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.5.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"contributors":[{"name":"Aseem Kishore","email":"aseem.kishore@gmail.com"}],"devDependencies":{"mocha":"*","should":"*"},"keywords":["test","bdd","assert"],"main":"./lib/should.js","engines":{"node":">= 0.2.0"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"should@0.5.1","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"3729f1c791415ab56406d6e9d7bd65368ac2ef1b","tarball":"http://registry.npmjs.org/should/-/should-0.5.1.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.6.0":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.6.0","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"contributors":[{"name":"Aseem Kishore","email":"aseem.kishore@gmail.com"}],"devDependencies":{"mocha":"*","should":"*"},"keywords":["test","bdd","assert"],"main":"./lib/should.js","engines":{"node":">= 0.2.0"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"should@0.6.0","dependencies":{},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"87dd3f6a3eeade91a8224c779638e46b180c2a88","tarball":"http://registry.npmjs.org/should/-/should-0.6.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.6.1":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.6.1","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/should.js.git"},"contributors":[{"name":"Aseem Kishore","email":"aseem.kishore@gmail.com"}],"devDependencies":{"mocha":"*"},"keywords":["test","bdd","assert"],"main":"./lib/should.js","engines":{"node":">= 0.2.0"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"should@0.6.1","dependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"70072db8fb46a6d5a784f935e6b4e76ff5576fa1","tarball":"http://registry.npmjs.org/should/-/should-0.6.1.tgz"},"readme":"_should_ is an expressive, readable, test framework agnostic, assertion library for [node](http://nodejs.org).\n  \nIt extends the Object prototype with a single non-enumerable getter that allows you to express how that object should behave.\n\n_should_ literally extends node's _assert_ module, in fact, it is node's assert module, for example `should.equal(str, 'foo')` will work, just as `assert.equal(str, 'foo')` would, and `should.AssertionError` **is** `assert.AssertionError`, meaning any test framework supporting this constructor will function properly with _should_.\n\n## Example\n\n    var user = {\n        name: 'tj'\n      , pets: ['tobi', 'loki', 'jane', 'bandit']\n    };\n\n    user.should.have.property('name', 'tj');\n    user.should.have.property('pets').with.lengthOf(4);\n    \n    someAsyncTask(foo, function(err, result){\n      should.not.exist(err);\n      should.exist(result);\n      result.bar.should.equal(foo);\n    });\n\n## Installation\n\n    $ npm install should\n\n## assert extras\n\nAs mentioned above, _should_ extends node's _assert_. The returned object from `require('should')` is thus similar to the returned object from `require('assert')`, but it has one extra convenience method:\n\n    should.exist('hello')\n    should.exist([])\n    should.exist(null)  // will throw\n\nThis is equivalent to `should.ok`, which is equivalent to `assert.ok`, but reads a bit better. It gets better, though:\n\n    should.not.exist(false)\n    should.not.exist('')\n    should.not.exist({})    // will throw\n\nWe may add more _assert_ extras in the future... ;)\n\n## chaining assertions\n\nSome assertions can be chained, for example if a property is volatile we can first assert property existence:\n\n    user.should.have.property('pets').with.lengthOf(4)\n\nwhich is essentially equivalent to below, however the property may not exist:\n\n    user.pets.should.have.lengthOf(4)\n\nour dummy getters such as _and_ also help express chaining:\n\n    user.should.be.a('object').and.have.property('name', 'tj')\n\n## exist (static)\n\nThe returned object from `require('should')` is the same object as `require('assert')`. So you can use `should` just like `assert`:\n\n    should.fail('expected an error!')\n    should.strictEqual(foo, bar)\n\nIn general, using the Object prototype's _should_ is nicer than using these `assert` equivalents, because _should_ gives you access to the expressive and readable language described above:\n\n    foo.should.equal(bar)   // same as should.strictEqual(foo, bar) above\n\nThe only exception, though, is when you can't be sure that a particular object exists. In that case, attempting to access the _should_ property may throw a TypeError:\n\n    foo.should.equal(bar)   // throws if foo is null or undefined!\n\nFor this case, `require('should')` extends `require('assert')` with an extra convenience method to check whether an object exists:\n\n    should.exist({})\n    should.exist([])\n    should.exist('')\n    should.exist(0)\n    should.exist(null)      // will throw\n    should.exist(undefined) // will throw\n\nYou can also check the negation:\n\n    should.not.exist(undefined)\n    should.not.exist(null)\n    should.not.exist('')    // will throw\n    should.not.exist({})    // will throw\n\nOnce you know an object exists, you can safely use the _should_ property on it.\n\n## ok\n\nAssert truthfulness:\n\n    true.should.be.ok\n    'yay'.should.be.ok\n    (1).should.be.ok\n\nor negated:\n\n    false.should.not.be.ok\n    ''.should.not.be.ok\n    (0).should.not.be.ok\n\n## true\n\nAssert === true:\n\n    true.should.be.true\n    '1'.should.not.be.true\n\n## false\n\nAssert === false:\n\n     false.should.be.false\n     (0).should.not.be.false\n\n## arguments\n\nAssert `Arguments`:\n\n    var args = (function(){ return arguments; })(1,2,3);\n    args.should.be.arguments;\n    [].should.not.be.arguments;\n\n## empty\n\nAsserts that length is 0:\n\n    [].should.be.empty\n    ''.should.be.empty\n    ({ length: 0 }).should.be.empty\n\n## eql\n\nequality:\n\n    ({ foo: 'bar' }).should.eql({ foo: 'bar' })\n    [1,2,3].should.eql([1,2,3])\n\n## equal\n\nstrict equality:\n\n    should.strictEqual(undefined, value)\n    should.strictEqual(false, value)\n    (4).should.equal(4)\n    'test'.should.equal('test')\n    [1,2,3].should.not.equal([1,2,3])\n\n## within\n\nAssert inclusive numeric range:\n\n    user.age.should.be.within(5, 50)\n\n## a\n\nAssert __typeof__:\n\n    user.should.be.a('object')\n    'test'.should.be.a('string')\n\n## instanceof\n\nAssert __instanceof__:\n\n    user.should.be.an.instanceof(User)\n    [].should.be.an.instanceof(Array)\n\n## above\n\nAssert numeric value above the given value:\n\n    user.age.should.be.above(5)\n    user.age.should.not.be.above(100)\n\n## below\n\nAssert numeric value below the given value:\n\n    user.age.should.be.below(100)\n    user.age.should.not.be.below(5)\n\n## match\n\nAssert regexp match:\n\n    username.should.match(/^\\w+$/)\n\n## length\n\nAssert _length_ property exists and has a value of the given number:\n\n    user.pets.should.have.length(5)\n    user.pets.should.have.a.lengthOf(5)\n\nAliases: _lengthOf_\n\n## property\n\nAssert property exists and has optional value:\n\n    user.should.have.property('name')\n    user.should.have.property('age', 15)\n    user.should.not.have.property('rawr')\n    user.should.not.have.property('age', 0)\n\n## ownProperty\n\nAssert own property (on the immediate object):\n\n    ({ foo: 'bar' }).should.have.ownProperty('foo')\n\n## status(code)\n\n Asserts that `.statusCode` is `code`:\n\n   res.should.have.status(200);\n\n## header(field[, value])\n\n Asserts that a `.headers` object with `field` and optional `value` are present:\n\n     res.should.have.header('content-length');\n     res.should.have.header('Content-Length', '123');\n     res.should.have.header('content-length', '123');\n\n## json\n\n  Assert that Content-Type is \"application/json; charset=utf-8\"\n  \n      res.should.be.json\n\n## html\n\n  Assert that Content-Type is \"text/html; charset=utf-8\"\n  \n      res.should.be.html\n\n## include(obj)\n\nAssert that the given `obj` is present via `indexOf()`, so this works for strings, arrays, or custom objects implementing indexOf:\n\nAssert array value:\n\n    [1,2,3].should.include(3)\n    [1,2,3].should.include(2)\n    [1,2,3].should.not.include(4)\n\nAssert substring:\n\n    'foo bar baz'.should.include('foo')\n    'foo bar baz'.should.include('bar')\n    'foo bar baz'.should.include('baz')\n    'foo bar baz'.should.not.include('FOO')\n\n## includeEql(obj)\n\nAssert that an object equal to the given `obj` is present in an Array:\n\n    [[1],[2],[3]].should.includeEql([3])\n    [[1],[2],[3]].should.includeEql([2])\n    [[1],[2],[3]].should.not.includeEql([4])\n\n## throw()\n\nAssert an exception is thrown:\n\n```js\n(function(){\n  throw new Error('fail');\n}).should.throw();\n```\n\nAssert an exception is not thrown:\n\n```js\n(function(){\n \n}).should.not.throw();\n```\nAssert exepection message matches string:\n\n```js\n(function(){\n  throw new Error('fail');\n}).should.throw('fail');\n```\n\nAssert exepection message matches regexp:\n\n```js\n(function(){\n  throw new Error('failed to foo');\n}).should.throw(/^fail/);\n```\n\n## keys\n\nAssert own object keys, which must match _exactly_,\nand will fail if you omit a key or two:\n\n    var obj = { foo: 'bar', baz: 'raz' };\n    obj.should.have.keys('foo', 'bar');\n    obj.should.have.keys(['foo', 'bar']);\n\n## Optional Error description\n\nAs it can often be difficult to ascertain exactly where failed assertions are coming from in your tests, an optional description parameter can be passed to several should matchers. The description will follow the failed assertion in the error:\n\n    (1).should.eql(0, 'some useful description')\n\n    AssertionError: expected 1 to equal 0 | some useful description\n      at Object.eql (/Users/swift/code/should.js/node_modules/should/lib/should.js:280:10)\n      ...\n\nThe methods that support this optional description are: `eql`, `equal`, `within`, `a`, `instanceof`, `above`, `below`, `match`, `length`, `property`, `ownProperty`, `include`, and `includeEql`.\n\n## Express example\n\nFor example you can use should with the [Expresso TDD Framework](http://github.com/visionmedia/expresso) by simply including it:\n\n    var lib = require('mylib')\n      , should = require('should');\n  \n    module.exports = {\n      'test .version': function(){\n        lib.version.should.match(/^\\d+\\.\\d+\\.\\d+$/);\n      }\n    };\n\n## Running tests\n\nTo run the tests for _should_ simply update your git submodules and run:\n\n    $ make test\n\n## OMG IT EXTENDS OBJECT???!?!@\n\nYes, yes it does, with a single getter _should_, and no it won't break your code, because it does this **properly** with a non-enumerable property.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2010-2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\nCopyright (c) 2011 Aseem Kishore &lt;aseem.kishore@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.6.2":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.6.2","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/should.js.git"},"homepage":"https://github.com/visionmedia/should.js","contributors":[{"name":"Aseem Kishore","email":"aseem.kishore@gmail.com"}],"devDependencies":{"mocha":"*"},"keywords":["test","bdd","assert"],"main":"./lib/should.js","engines":{"node":">= 0.2.0"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"should@0.6.2","dependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.9","_defaultsLoaded":true,"dist":{"shasum":"081976f8b0e679cbba578805373423aabf36c1ce","tarball":"http://registry.npmjs.org/should/-/should-0.6.2.tgz"},"readme":"_should_ is an expressive, readable, test framework agnostic, assertion library for [node](http://nodejs.org).\n  \nIt extends the Object prototype with a single non-enumerable getter that allows you to express how that object should behave.\n\n_should_ literally extends node's _assert_ module, in fact, it is node's assert module, for example `should.equal(str, 'foo')` will work, just as `assert.equal(str, 'foo')` would, and `should.AssertionError` **is** `assert.AssertionError`, meaning any test framework supporting this constructor will function properly with _should_.\n\n## Example\n\n    var user = {\n        name: 'tj'\n      , pets: ['tobi', 'loki', 'jane', 'bandit']\n    };\n\n    user.should.have.property('name', 'tj');\n    user.should.have.property('pets').with.lengthOf(4);\n    \n    someAsyncTask(foo, function(err, result){\n      should.not.exist(err);\n      should.exist(result);\n      result.bar.should.equal(foo);\n    });\n\n## Installation\n\n    $ npm install should\n\n## assert extras\n\nAs mentioned above, _should_ extends node's _assert_. The returned object from `require('should')` is thus similar to the returned object from `require('assert')`, but it has one extra convenience method:\n\n    should.exist('hello')\n    should.exist([])\n    should.exist(null)  // will throw\n\nThis is equivalent to `should.ok`, which is equivalent to `assert.ok`, but reads a bit better. It gets better, though:\n\n    should.not.exist(false)\n    should.not.exist('')\n    should.not.exist({})    // will throw\n\nWe may add more _assert_ extras in the future... ;)\n\n## chaining assertions\n\nSome assertions can be chained, for example if a property is volatile we can first assert property existence:\n\n    user.should.have.property('pets').with.lengthOf(4)\n\nwhich is essentially equivalent to below, however the property may not exist:\n\n    user.pets.should.have.lengthOf(4)\n\nour dummy getters such as _and_ also help express chaining:\n\n    user.should.be.a('object').and.have.property('name', 'tj')\n\n## exist (static)\n\nThe returned object from `require('should')` is the same object as `require('assert')`. So you can use `should` just like `assert`:\n\n    should.fail('expected an error!')\n    should.strictEqual(foo, bar)\n\nIn general, using the Object prototype's _should_ is nicer than using these `assert` equivalents, because _should_ gives you access to the expressive and readable language described above:\n\n    foo.should.equal(bar)   // same as should.strictEqual(foo, bar) above\n\nThe only exception, though, is when you can't be sure that a particular object exists. In that case, attempting to access the _should_ property may throw a TypeError:\n\n    foo.should.equal(bar)   // throws if foo is null or undefined!\n\nFor this case, `require('should')` extends `require('assert')` with an extra convenience method to check whether an object exists:\n\n    should.exist({})\n    should.exist([])\n    should.exist('')\n    should.exist(0)\n    should.exist(null)      // will throw\n    should.exist(undefined) // will throw\n\nYou can also check the negation:\n\n    should.not.exist(undefined)\n    should.not.exist(null)\n    should.not.exist('')    // will throw\n    should.not.exist({})    // will throw\n\nOnce you know an object exists, you can safely use the _should_ property on it.\n\n## ok\n\nAssert truthfulness:\n\n    true.should.be.ok\n    'yay'.should.be.ok\n    (1).should.be.ok\n\nor negated:\n\n    false.should.not.be.ok\n    ''.should.not.be.ok\n    (0).should.not.be.ok\n\n## true\n\nAssert === true:\n\n    true.should.be.true\n    '1'.should.not.be.true\n\n## false\n\nAssert === false:\n\n     false.should.be.false\n     (0).should.not.be.false\n\n## arguments\n\nAssert `Arguments`:\n\n    var args = (function(){ return arguments; })(1,2,3);\n    args.should.be.arguments;\n    [].should.not.be.arguments;\n\n## empty\n\nAsserts that length is 0:\n\n    [].should.be.empty\n    ''.should.be.empty\n    ({ length: 0 }).should.be.empty\n\n## eql\n\nequality:\n\n    ({ foo: 'bar' }).should.eql({ foo: 'bar' })\n    [1,2,3].should.eql([1,2,3])\n\n## equal\n\nstrict equality:\n\n    should.strictEqual(undefined, value)\n    should.strictEqual(false, value)\n    (4).should.equal(4)\n    'test'.should.equal('test')\n    [1,2,3].should.not.equal([1,2,3])\n\n## within\n\nAssert inclusive numeric range:\n\n    user.age.should.be.within(5, 50)\n\n## a\n\nAssert __typeof__:\n\n    user.should.be.a('object')\n    'test'.should.be.a('string')\n\n## instanceof\n\nAssert __instanceof__:\n\n    user.should.be.an.instanceof(User)\n    [].should.be.an.instanceof(Array)\n\n## above\n\nAssert numeric value above the given value:\n\n    user.age.should.be.above(5)\n    user.age.should.not.be.above(100)\n\n## below\n\nAssert numeric value below the given value:\n\n    user.age.should.be.below(100)\n    user.age.should.not.be.below(5)\n\n## match\n\nAssert regexp match:\n\n    username.should.match(/^\\w+$/)\n\n## length\n\nAssert _length_ property exists and has a value of the given number:\n\n    user.pets.should.have.length(5)\n    user.pets.should.have.a.lengthOf(5)\n\nAliases: _lengthOf_\n\n## property\n\nAssert property exists and has optional value:\n\n    user.should.have.property('name')\n    user.should.have.property('age', 15)\n    user.should.not.have.property('rawr')\n    user.should.not.have.property('age', 0)\n\n## ownProperty\n\nAssert own property (on the immediate object):\n\n    ({ foo: 'bar' }).should.have.ownProperty('foo')\n\n## status(code)\n\n Asserts that `.statusCode` is `code`:\n\n   res.should.have.status(200);\n\n## header(field[, value])\n\n Asserts that a `.headers` object with `field` and optional `value` are present:\n\n     res.should.have.header('content-length');\n     res.should.have.header('Content-Length', '123');\n     res.should.have.header('content-length', '123');\n\n## json\n\n  Assert that Content-Type is \"application/json; charset=utf-8\"\n  \n      res.should.be.json\n\n## html\n\n  Assert that Content-Type is \"text/html; charset=utf-8\"\n  \n      res.should.be.html\n\n## include(obj)\n\nAssert that the given `obj` is present via `indexOf()`, so this works for strings, arrays, or custom objects implementing indexOf:\n\nAssert array value:\n\n    [1,2,3].should.include(3)\n    [1,2,3].should.include(2)\n    [1,2,3].should.not.include(4)\n\nAssert substring:\n\n    'foo bar baz'.should.include('foo')\n    'foo bar baz'.should.include('bar')\n    'foo bar baz'.should.include('baz')\n    'foo bar baz'.should.not.include('FOO')\n\n## includeEql(obj)\n\nAssert that an object equal to the given `obj` is present in an Array:\n\n    [[1],[2],[3]].should.includeEql([3])\n    [[1],[2],[3]].should.includeEql([2])\n    [[1],[2],[3]].should.not.includeEql([4])\n\n## throw()\n\nAssert an exception is thrown:\n\n```js\n(function(){\n  throw new Error('fail');\n}).should.throw();\n```\n\nAssert an exception is not thrown:\n\n```js\n(function(){\n \n}).should.not.throw();\n```\nAssert exepection message matches string:\n\n```js\n(function(){\n  throw new Error('fail');\n}).should.throw('fail');\n```\n\nAssert exepection message matches regexp:\n\n```js\n(function(){\n  throw new Error('failed to foo');\n}).should.throw(/^fail/);\n```\n\n## keys\n\nAssert own object keys, which must match _exactly_,\nand will fail if you omit a key or two:\n\n    var obj = { foo: 'bar', baz: 'raz' };\n    obj.should.have.keys('foo', 'bar');\n    obj.should.have.keys(['foo', 'bar']);\n\n## Optional Error description\n\nAs it can often be difficult to ascertain exactly where failed assertions are coming from in your tests, an optional description parameter can be passed to several should matchers. The description will follow the failed assertion in the error:\n\n    (1).should.eql(0, 'some useful description')\n\n    AssertionError: expected 1 to equal 0 | some useful description\n      at Object.eql (/Users/swift/code/should.js/node_modules/should/lib/should.js:280:10)\n      ...\n\nThe methods that support this optional description are: `eql`, `equal`, `within`, `a`, `instanceof`, `above`, `below`, `match`, `length`, `property`, `ownProperty`, `include`, and `includeEql`.\n\n## Express example\n\nFor example you can use should with the [Expresso TDD Framework](http://github.com/visionmedia/expresso) by simply including it:\n\n    var lib = require('mylib')\n      , should = require('should');\n  \n    module.exports = {\n      'test .version': function(){\n        lib.version.should.match(/^\\d+\\.\\d+\\.\\d+$/);\n      }\n    };\n\n## Running tests\n\nTo run the tests for _should_ simply update your git submodules and run:\n\n    $ make test\n\n## OMG IT EXTENDS OBJECT???!?!@\n\nYes, yes it does, with a single getter _should_, and no it won't break your code, because it does this **properly** with a non-enumerable property.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2010-2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\nCopyright (c) 2011 Aseem Kishore &lt;aseem.kishore@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.6.3":{"name":"should","description":"test framework agnostic BDD-style assertions","version":"0.6.3","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/should.js.git"},"homepage":"https://github.com/visionmedia/should.js","contributors":[{"name":"Aseem Kishore","email":"aseem.kishore@gmail.com"}],"devDependencies":{"mocha":"*"},"keywords":["test","bdd","assert"],"main":"./lib/should.js","engines":{"node":">= 0.2.0"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_id":"should@0.6.3","dependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.9","_defaultsLoaded":true,"dist":{"shasum":"d4b55335c8908f3a6c47970b687f750372acdc73","tarball":"http://registry.npmjs.org/should/-/should-0.6.3.tgz"},"readme":"_should_ is an expressive, readable, test framework agnostic, assertion library for [node](http://nodejs.org).\n  \nIt extends the Object prototype with a single non-enumerable getter that allows you to express how that object should behave.\n\n_should_ literally extends node's _assert_ module, in fact, it is node's assert module, for example `should.equal(str, 'foo')` will work, just as `assert.equal(str, 'foo')` would, and `should.AssertionError` **is** `assert.AssertionError`, meaning any test framework supporting this constructor will function properly with _should_.\n\n## Example\n\n    var user = {\n        name: 'tj'\n      , pets: ['tobi', 'loki', 'jane', 'bandit']\n    };\n\n    user.should.have.property('name', 'tj');\n    user.should.have.property('pets').with.lengthOf(4);\n    \n    someAsyncTask(foo, function(err, result){\n      should.not.exist(err);\n      should.exist(result);\n      result.bar.should.equal(foo);\n    });\n\n## Installation\n\n    $ npm install should\n\n## assert extras\n\nAs mentioned above, _should_ extends node's _assert_. The returned object from `require('should')` is thus similar to the returned object from `require('assert')`, but it has one extra convenience method:\n\n    should.exist('hello')\n    should.exist([])\n    should.exist(null)  // will throw\n\nThis is equivalent to `should.ok`, which is equivalent to `assert.ok`, but reads a bit better. It gets better, though:\n\n    should.not.exist(false)\n    should.not.exist('')\n    should.not.exist({})    // will throw\n\nWe may add more _assert_ extras in the future... ;)\n\n## chaining assertions\n\nSome assertions can be chained, for example if a property is volatile we can first assert property existence:\n\n    user.should.have.property('pets').with.lengthOf(4)\n\nwhich is essentially equivalent to below, however the property may not exist:\n\n    user.pets.should.have.lengthOf(4)\n\nour dummy getters such as _and_ also help express chaining:\n\n    user.should.be.a('object').and.have.property('name', 'tj')\n\n## exist (static)\n\nThe returned object from `require('should')` is the same object as `require('assert')`. So you can use `should` just like `assert`:\n\n    should.fail('expected an error!')\n    should.strictEqual(foo, bar)\n\nIn general, using the Object prototype's _should_ is nicer than using these `assert` equivalents, because _should_ gives you access to the expressive and readable language described above:\n\n    foo.should.equal(bar)   // same as should.strictEqual(foo, bar) above\n\nThe only exception, though, is when you can't be sure that a particular object exists. In that case, attempting to access the _should_ property may throw a TypeError:\n\n    foo.should.equal(bar)   // throws if foo is null or undefined!\n\nFor this case, `require('should')` extends `require('assert')` with an extra convenience method to check whether an object exists:\n\n    should.exist({})\n    should.exist([])\n    should.exist('')\n    should.exist(0)\n    should.exist(null)      // will throw\n    should.exist(undefined) // will throw\n\nYou can also check the negation:\n\n    should.not.exist(undefined)\n    should.not.exist(null)\n    should.not.exist('')    // will throw\n    should.not.exist({})    // will throw\n\nOnce you know an object exists, you can safely use the _should_ property on it.\n\n## ok\n\nAssert truthfulness:\n\n    true.should.be.ok\n    'yay'.should.be.ok\n    (1).should.be.ok\n\nor negated:\n\n    false.should.not.be.ok\n    ''.should.not.be.ok\n    (0).should.not.be.ok\n\n## true\n\nAssert === true:\n\n    true.should.be.true\n    '1'.should.not.be.true\n\n## false\n\nAssert === false:\n\n     false.should.be.false\n     (0).should.not.be.false\n\n## arguments\n\nAssert `Arguments`:\n\n    var args = (function(){ return arguments; })(1,2,3);\n    args.should.be.arguments;\n    [].should.not.be.arguments;\n\n## empty\n\nAsserts that length is 0:\n\n    [].should.be.empty\n    ''.should.be.empty\n    ({ length: 0 }).should.be.empty\n\n## eql\n\nequality:\n\n    ({ foo: 'bar' }).should.eql({ foo: 'bar' })\n    [1,2,3].should.eql([1,2,3])\n\n## equal\n\nstrict equality:\n\n    should.strictEqual(undefined, value)\n    should.strictEqual(false, value)\n    (4).should.equal(4)\n    'test'.should.equal('test')\n    [1,2,3].should.not.equal([1,2,3])\n\n## within\n\nAssert inclusive numeric range:\n\n    user.age.should.be.within(5, 50)\n\n## a\n\nAssert __typeof__:\n\n    user.should.be.a('object')\n    'test'.should.be.a('string')\n\n## instanceof\n\nAssert __instanceof__:\n\n    user.should.be.an.instanceof(User)\n    [].should.be.an.instanceof(Array)\n\n## above\n\nAssert numeric value above the given value:\n\n    user.age.should.be.above(5)\n    user.age.should.not.be.above(100)\n\n## below\n\nAssert numeric value below the given value:\n\n    user.age.should.be.below(100)\n    user.age.should.not.be.below(5)\n\n## match\n\nAssert regexp match:\n\n    username.should.match(/^\\w+$/)\n\n## length\n\nAssert _length_ property exists and has a value of the given number:\n\n    user.pets.should.have.length(5)\n    user.pets.should.have.a.lengthOf(5)\n\nAliases: _lengthOf_\n\n## property\n\nAssert property exists and has optional value:\n\n    user.should.have.property('name')\n    user.should.have.property('age', 15)\n    user.should.not.have.property('rawr')\n    user.should.not.have.property('age', 0)\n\n## ownProperty\n\nAssert own property (on the immediate object):\n\n    ({ foo: 'bar' }).should.have.ownProperty('foo')\n\n## status(code)\n\n Asserts that `.statusCode` is `code`:\n\n   res.should.have.status(200);\n\n## header(field[, value])\n\n Asserts that a `.headers` object with `field` and optional `value` are present:\n\n     res.should.have.header('content-length');\n     res.should.have.header('Content-Length', '123');\n     res.should.have.header('content-length', '123');\n\n## json\n\n  Assert that Content-Type is \"application/json; charset=utf-8\"\n  \n      res.should.be.json\n\n## html\n\n  Assert that Content-Type is \"text/html; charset=utf-8\"\n  \n      res.should.be.html\n\n## include(obj)\n\nAssert that the given `obj` is present via `indexOf()`, so this works for strings, arrays, or custom objects implementing indexOf.\n\nAssert array value:\n\n    [1,2,3].should.include(3)\n    [1,2,3].should.include(2)\n    [1,2,3].should.not.include(4)\n\nAssert substring:\n\n    'foo bar baz'.should.include('foo')\n    'foo bar baz'.should.include('bar')\n    'foo bar baz'.should.include('baz')\n    'foo bar baz'.should.not.include('FOO')\n\nAssert object includes another object:\n\n    var tobi = { name: 'Tobi', age: 1 };\n    var jane = { name: 'Jane', age: 5 };\n    var user = { name: 'TJ', pet: tobi };\n\n    user.should.include({ pet: tobi });\n    user.should.include({ pet: tobi, name: 'TJ' });\n    user.should.not.include({ pet: jane });\n    user.should.not.include({ name: 'Someone' });\n\n## includeEql(obj)\n\nAssert that an object equal to the given `obj` is present in an Array:\n\n    [[1],[2],[3]].should.includeEql([3])\n    [[1],[2],[3]].should.includeEql([2])\n    [[1],[2],[3]].should.not.includeEql([4])\n\n## throw()\n\nAssert an exception is thrown:\n\n```js\n(function(){\n  throw new Error('fail');\n}).should.throw();\n```\n\nAssert an exception is not thrown:\n\n```js\n(function(){\n \n}).should.not.throw();\n```\nAssert exepection message matches string:\n\n```js\n(function(){\n  throw new Error('fail');\n}).should.throw('fail');\n```\n\nAssert exepection message matches regexp:\n\n```js\n(function(){\n  throw new Error('failed to foo');\n}).should.throw(/^fail/);\n```\n\n## keys\n\nAssert own object keys, which must match _exactly_,\nand will fail if you omit a key or two:\n\n    var obj = { foo: 'bar', baz: 'raz' };\n    obj.should.have.keys('foo', 'bar');\n    obj.should.have.keys(['foo', 'bar']);\n\n## Optional Error description\n\nAs it can often be difficult to ascertain exactly where failed assertions are coming from in your tests, an optional description parameter can be passed to several should matchers. The description will follow the failed assertion in the error:\n\n    (1).should.eql(0, 'some useful description')\n\n    AssertionError: expected 1 to equal 0 | some useful description\n      at Object.eql (/Users/swift/code/should.js/node_modules/should/lib/should.js:280:10)\n      ...\n\nThe methods that support this optional description are: `eql`, `equal`, `within`, `a`, `instanceof`, `above`, `below`, `match`, `length`, `property`, `ownProperty`, `include`, and `includeEql`.\n\n## Express example\n\nFor example you can use should with the [Expresso TDD Framework](http://github.com/visionmedia/expresso) by simply including it:\n\n    var lib = require('mylib')\n      , should = require('should');\n  \n    module.exports = {\n      'test .version': function(){\n        lib.version.should.match(/^\\d+\\.\\d+\\.\\d+$/);\n      }\n    };\n\n## Running tests\n\nTo run the tests for _should_ simply update your git submodules and run:\n\n    $ make test\n\n## OMG IT EXTENDS OBJECT???!?!@\n\nYes, yes it does, with a single getter _should_, and no it won't break your code, because it does this **properly** with a non-enumerable property.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2010-2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\nCopyright (c) 2011 Aseem Kishore &lt;aseem.kishore@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}}},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"time":{"0.0.1":"2011-04-06T16:44:36.271Z","0.0.2":"2011-04-06T16:44:36.271Z","0.0.3":"2011-04-06T16:44:36.271Z","0.0.4":"2011-04-06T16:44:36.271Z","0.1.0":"2011-04-06T16:44:36.271Z","0.2.0":"2011-04-18T02:19:45.548Z","0.2.1":"2011-05-13T16:17:19.298Z","0.3.0":"2011-08-20T19:36:23.873Z","0.3.1":"2011-08-22T18:54:56.459Z","0.3.2":"2011-10-24T20:59:47.487Z","0.4.0":"2011-12-16T22:33:03.877Z","0.4.1":"2011-12-17T00:58:31.688Z","0.4.2":"2011-12-17T18:44:08.619Z","0.5.0":"2012-01-12T11:33:47.871Z","0.5.1":"2012-01-14T03:25:57.419Z","0.6.0":"2012-03-01T21:03:34.833Z","0.6.1":"2012-04-10T19:29:52.428Z","0.6.2":"2012-04-26T15:40:02.215Z","0.6.3":"2012-04-26T23:13:11.889Z"},"users":{"vesln":true,"kevinohara80":true},"repository":{"type":"git","url":"git://github.com/visionmedia/should.js.git"},"_etag":"\"DJM32SPKTRMJBIBATIPOSCZ5C\""}